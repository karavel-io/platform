# Initialize the required namespaces in advance
# Requires
init_namespaces: true

# ====== #
# Calico #
# ====== #
calico:
  enable_cni: true
  ha_setup: false

# ================ #
# External Secrets #
# ================ #
secrets:
  polling_interval_ms: 300000

  #  provider: aws
  region: eu-west-1
  eks_role: ""  # When running on EKS
  iam_role: ""  # When running on EC2

  # provider: vault
  address: http://127.0.0.1:8200
  default_mount_point: my-cluster
  default_role: my-k8s-role
  extra_certs_secret_ref:
    name: vault-ca
    key: ca.pem

# ============ #
# External DNS
# ============ #
dns:
  domain_filter: example.com
  # Cloudflare
  provider: cloudflare
  email: my-cloudflare@example.com
  proxied: true
  hosted_zone_id: ABCDEXAMPLE # optional
  secret_ref:
    backend: secretsManager
    key: my-cluster/cloudflare
    property: api-token

  # AWS Route53
  provider: route53
  region: eu-west-1
  hosted_zone_id: ABCDEXAMPLE # optional, see https://cert-manager.io/docs/configuration/acme/dns01/route53/#set-up-an-iam-role
  hosted_zone_type: "" # "public", "private", leave empty for "both"
  eks_role: ""  # When running on EKS
  iam_role: ""  # When running on EC2

# =========================== #
# Let's Encrypt DNS challenge #
# =========================== #
# This section is optional if using the same provider as External DNS
letsencrypt:
  # Cloudflare
  provider: cloudflare
  email: my-cloudflare@example.com
  secret_ref:
    backend: secretsManager
    key: my-cluster/cloudflare
    property: api-token

  # AWS Route53
  provider: route53
  region: eu-west-1
  hosted_zone_id: ABCDEXAMPLE # optional, see https://cert-manager.io/docs/configuration/acme/dns01/route53/#set-up-an-iam-role
  eks_role: ""  # When running on EKS
  iam_role: ""  # When running on EC2

# ======== #
# Dex OIDC #
# ======== #
dex:
  public_host: dex.example.com
  # Dex connectors
  # See https://dexidp.io/docs/connectors/ for information about how to configure them
  connectors:
    - type: github
      id: github
      name: GitHub
      config:
        clientID: $GITHUB_CLIENT_ID
        clientSecret: $GITHUB_CLIENT_SECRET
        redirectURI: https://dex.example.com/callback
        org: kubernetes
  secrets:
    # creates a secret named $name from the secure backend
    # Properties in the secret will be mapped as-is to environment variables in Dex's container
    - name: github-creds
      backend: secretsManager
      key: my-cluster/dex-github-creds
  clients:
    - id: example-app
      redirectURIs:
        - 'http://127.0.0.1:5555/callback'
      name: 'Example App'
      secretEnv: $EXAMPLE_CLIENT_SECRET

# ====== #
# ArgoCD #
# ====== #
argocd:
  public_host: argocd.example.com
  git:
    repo: git@github.com:example/example.git
    credentials_secret_ref:
      # Basic auth or access token authentication
      # Used for HTTPS repo URLs
      username_secret:
        name: infrastructure-repo-secret
        key: username
      password_secret:
        name: infrastructure-repo-secret
        key: password
      # SSH private key authentication
      # Used for git or git+ssh repo URLs
      ssh_private_key_secret:
        name: infrastructure-repo-secret
        key: sshPrivateKey

  # Policy group for admins
  # Maps to the OIDC provider group
  adminGroup: ""

  # creates the infrastructure-repo-secret from the secure backend
  # Must contain the keys defined in argocd.git.repo.credentials_secret_ref
  credentials_secret:
    backend: secretsManager
    key: my-cluster/argocd-pull-creds

  # creates the argocd-secret manifest from the secure backend
  # Can contain all the keys defined in argocd-secrets
  # https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-secret.yaml#L10
  secret:
    backend: secretsManager
    key: my-cluster/argocd-secret

